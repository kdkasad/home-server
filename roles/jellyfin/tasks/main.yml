---
- name: Set up Jellyfin
  when: jellyfin_enabled is true
  vars:
    jellyfin_authorization_header: >-
      MediaBrowser Client="Jellyfin Web", Device="Ansible", Version="10.9.7"
      {{ jellyfin_auth_token | ternary(', Token="' + jellyfin_auth_token + '"', '') }}
  block:

    - name: Install required packages
      ansible.builtin.package:
        name:
          - acl               # For setting media library permissions using ACLs
          - python3-requests  # For jellysetup.py script
        state: present

    - name: Add Jellyfin user
      ansible.builtin.user:
        name: jellyfin
        groups:
          - video
          - render
        uid: 896
        system: true
        shell: /sbin/nologin

    # Use ACLs to allow Jellyfin to access media files. This allows us to use
    # one of the NAS shares as the media directory, and have Jellyfin access
    # the files without having to change the owner or run as root.
    - name: Set permissions on Jellyfin media directory
      ansible.posix.acl:
        path: "{{ jellyfin_media_dir }}"
        entity: jellyfin
        etype: user
        permissions: rwX
        default: true
        recurse: true
        recalculate_mask: mask
        state: present

    - name: Create metadata directory for media
      ansible.builtin.file:
        path: "{{ jellyfin_media_dir }}/metadata"
        state: directory
        owner: jellyfin
        mode: '0700'

    - name: Check if Jellyfin configuration directory exists
      ansible.builtin.stat:
        path: "{{ jellyfin_data_dir }}/config"
      register: config_dir
      changed_when: false

    - name: Create Jellyfin data directory
      ansible.builtin.file:
        path: "{{ jellyfin_data_dir }}"
        state: directory
        owner: jellyfin
        mode: '0700'

    - name: Start Jellyfin
      # when: false
      community.docker.docker_container:
        name: jellyfin
        image: lscr.io/linuxserver/jellyfin:{{ jellyfin_tag }}
        pull: always
        image_name_mismatch: recreate
        restart_policy: unless-stopped
        volumes:
          - "{{ jellyfin_media_dir }}:/media"
          - "{{ jellyfin_data_dir }}/config:/config"
        tmpfs:
          - /config/transcodes
          - /config/cache
          - /config/data/transcodes
        devices: >-
          {{ jellyfin_enable_vaapi | ternary([
            '/dev/dri/card0:/dev/dri/card0',
            '/dev/dri/renderD128:/dev/dri/renderD128',
          ], []) }}
        env:
          PUID: '896'  # jellyfin user
          UMASK: '002'
          DOCKER_MODS: ghcr.io/kdkasad/docker-mods/jellyfin-jellyscrub
          JELLYFIN_PublishedServerUrl: "https://{{ jellyfin_routing.subdomain }}.{{ general.domain }}"
        labels:
          traefik.enable: "{{ jellyfin_routing.enabled | ternary('true', 'false') }}"
          traefik.http.routers.jellyfin.rule: Host(`{{ jellyfin_routing.subdomain }}.{{ general.domain }}`)
          traefik.http.routers.jellyfin.entrypoints: websecure
          traefik.http.services.jellyfin.loadbalancer.server.port: '8096'
        healthcheck:
          test: ["CMD-SHELL", "curl -fs http://localhost:8096/health"]
        networks_cli_compatible: false
        networks:
          - name: subway

    - name: Perform initial Jellyfin setup
      when: not config_dir.stat.exists
      jellyfin_setup:
        server_name: "{{ jellyfin_server_name }}"
        admin_username: "{{ jellyfin_admin_username }}"
        admin_password: "{{ jellyfin_admin_password }}"
        oidc_client_id: "{{ jellyfin_oidc_client_id }}"
        oidc_client_secret: "{{ jellyfin_oidc_client_secret }}"
        jellyfin_domain: "{{ jellyfin_routing.subdomain }}.{{ general.domain }}"
        authentik_domain: "{{ authentik_routing.subdomain | default('authentik') }}.{{ general.domain }}"
        login_sso_only: "{{ jellyfin_sso_only }}"

    - name: Enable metrics for Jellyfin
      ansible.builtin.lineinfile:
        state: present
        path: "{{ jellyfin_data_dir }}/config/system.xml"
        line: "  <EnableMetrics>true</EnableMetrics>"
        regex: "^\\s*<EnableMetrics>[^<]+</EnableMetrics>\\s*$"
      notify: Restart Jellyfin container

- name: Disable Jellyfin
  when: jellyfin_enabled is false
  block:
    - name: Stop Jellyfin
      community.docker.docker_container:
        name: jellyfin
        state: absent
