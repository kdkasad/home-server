[server]
http_port = 3000
root_url = https://{{ monitoring_grafana_routing_subdomain }}.{{ general.domain }}

{% if monitoring_grafana_sso %}
[auth.generic_oauth]
# General
enabled = true  # Enable OAuth login.
name = Authentik  # Name of provider.
disable_login_form = "{{ monitoring_grafana_sso_only | ternary('true', 'false') }}"  # Whether to disable the built-in login form.
client_id = "{{ monitoring_grafana_client_id | mandatory }}"  # OIDC client ID.
client_secret = "{{ monitoring_grafana_client_secret | mandatory }}"  # OIDC client secret.

# Endpoints
auth_url = "https://{{ authentik_routing.subdomain | default('authentik') }}.{{ general.domain }}/application/o/authorize/"
token_url = "https://{{ authentik_routing.subdomain | default('authentik') }}.{{ general.domain }}/application/o/token/"
api_url = "https://{{ authentik_routing.subdomain | default('authentik') }}.{{ general.domain }}/application/o/userinfo/"
signout_redirect_url = "https://{{ authentik_routing.subdomain | default('authentik') }}.{{ general.domain }}/application/o/grafana/end-session/"

# Role mapping
scopes = openid profile email groups grafana  # OIDC scopes to request. "grafana" is added via property mapping in Authentik.
role_attribute_path = grafana_role  # Property to get role from. Must be configured using a property mapping in Authentik.
role_attribute_strict = true  # Prevent login if role is not found.
allow_assign_grafana_admin = true  # Allow OAuth to assign administrator role.
groups_attribute_path = groups  # Property to get groups from. Requires "groups" scope.

# Allow users with no email
email_attribute_path = "email || join('', [preferred_username, '@{{ general.domain }}'])"
{% endif %}
